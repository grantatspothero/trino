/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.tests.ci;

import io.airlift.log.Logger;
import jakarta.annotation.Nullable;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.yaml.snakeyaml.Yaml;

import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.stream.Stream;

import static com.google.common.base.Verify.verifyNotNull;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.collect.ImmutableMap.toImmutableMap;
import static com.google.common.collect.MoreCollectors.onlyElement;
import static org.assertj.core.api.Assertions.assertThat;

/**
 * Starburst's tests for workflows.
 *
 * @see TestCiWorkflow for workflow verification that is inherited from OSS.
 */
public class TestStarburstWorkflows
{
    private static final Logger log = Logger.get(TestStarburstWorkflows.class);

    private static final Path CI_YML_REPO_PATH = Paths.get(".github/workflows/ci.yml");

    @ParameterizedTest
    @MethodSource("listWorkflows")
    public void testUseStarburstRunners(Path path)
    {
        try {
            Yaml yaml = new Yaml();
            Map<?, ?> workflow = yaml.load(new StringReader(Files.readString(path)));
            Map<String, ?> jobs = getMap(workflow, "jobs");
            jobs.forEach((jobName, jobDefinition) -> {
                Map<?, ?> job = (Map<?, ?>) jobDefinition;

                String condition = ifPresent(job, "if", TestStarburstWorkflows::getString);
                if (condition != null && (condition.equals("github.repository == 'trinodb/trino'") ||
                        condition.equals("github.repository_owner == 'trinodb'") ||
                        condition.equals("${{ github.event.issue.pull_request }} && github.repository_owner == 'trinodb'"))) {
                    // Workflows with such conditions don't run in a fork.
                    return;
                }

                Object runsOn = job.get("runs-on");
                verifyNotNull(runsOn, "No runs-on for job %s".formatted(jobName));
                assertThat(runsOn.toString()).as("runs-on for job %s", jobName)
                        // TODO enforce "self-hosted" in runs-on? or is it redundant?
                        .contains("sep-cicd");
            });
        }
        catch (AssertionError | Exception e) {
            throw new AssertionError("Failed when checking %s: %s".formatted(path, e), e);
        }
    }

    public static List<Path> listWorkflows()
            throws Exception
    {
        try (Stream<Path> walk = Files.walk(findRepositoryRoot().resolve(".github/workflows"))) {
            return walk
                    .filter(path -> path.toString().endsWith(".yml"))
                    .collect(toImmutableList());
        }
    }

    @Test
    public void testBuildSuccessDependencies()
            throws Exception
    {
        String buildSuccessJobName = "build-success";

        Yaml yaml = new Yaml();
        Map<?, ?> workflow = yaml.load(new StringReader(Files.readString(findRepositoryRoot().resolve(CI_YML_REPO_PATH))));
        Map<String, ?> jobs = getMap(workflow, "jobs");

        Set<String> allJobNames = jobs.keySet();
        assertThat(allJobNames).as("allJobNames").contains(buildSuccessJobName);
        List<String> testJobNames = allJobNames.stream().filter(Predicate.not(buildSuccessJobName::equals))
                .sorted()
                .toList();
        Map<?, ?> buildSuccessJob = getMap(jobs, buildSuccessJobName);

        List<String> buildSuccessDependencies = getList(buildSuccessJob, "needs").stream()
                .map(String.class::cast)
                .collect(toImmutableList());
        assertThat(buildSuccessDependencies).as("dependencies for %s", buildSuccessJobName)
                .isSorted()
                .doesNotHaveDuplicates()
                .containsExactlyElementsOf(testJobNames);

        StringBuilder expectedRunDefinition = new StringBuilder();
        expectedRunDefinition.append("# generated by %s\n".formatted(getClass().getSimpleName()));
        testJobNames.stream()
                .map("echo '${{ needs.%1$s.result }}' | grep -xE 'success|skipped' || { echo 'Job \"%1$s\" failed' >&2; exit 1; }\n"::formatted)
                .forEachOrdered(expectedRunDefinition::append);
        Map<?, ?> runDefinition = getList(buildSuccessJob, "steps").stream()
                .map(step -> (Map<?, ?>) step)
                .filter(step -> "Check results".equals(ifPresent(step, "name", TestStarburstWorkflows::getString)))
                .collect(onlyElement());
        assertThat(runDefinition.get("run")).as("run script")
                .isEqualTo(expectedRunDefinition.toString());
    }

    private static Path findRepositoryRoot()
    {
        Path workingDirectory = Paths.get("").toAbsolutePath();
        log.info("Current working directory: %s", workingDirectory);
        for (Path path = workingDirectory; path != null; path = path.getParent()) {
            if (Files.isDirectory(path.resolve(".git"))) {
                return path;
            }
        }
        throw new RuntimeException("Failed to find repository root from " + workingDirectory);
    }

    private static String getString(Map<?, ?> map, String key)
    {
        Object value = map.get(key);
        verifyNotNull(value, "No or null entry for key [%s] in %s", key, map);
        return (String) value;
    }

    private static List<?> getList(Map<?, ?> map, String key)
    {
        Object value = map.get(key);
        verifyNotNull(value, "No or null entry for key [%s] in %s", key, map);
        return (List<?>) value;
    }

    private static Map<String, ?> getMap(Map<?, ?> map, String key)
    {
        Object value = map.get(key);
        verifyNotNull(value, "No or null entry for key [%s] in %s", key, map);
        return ((Map<?, ?>) value).entrySet().stream()
                .collect(toImmutableMap(e -> (String) e.getKey(), Map.Entry::getValue));
    }

    private static <T> @Nullable T ifPresent(Map<?, ?> map, String key, BiFunction<? super Map<?, ?>, ? super String, ? extends T> get)
    {
        if (!map.containsKey(key)) {
            return null;
        }
        return get.apply(map, key);
    }
}
